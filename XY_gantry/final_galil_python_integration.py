# -*- coding: utf-8 -*-
"""final_galil_python_integration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FJGalAYtls9Z9VfU0VDnom2y-LzQkt6Q
"""

'''
This code is to integrate python code with the galil terminal.
Ideally enter the gclib.py on the windows or linux terminal, open python in it, and then run this script to move the gantry to
exact positioning over the wet tank. it should ask the user for integer input, you can type move_to_xy(your x input, your y input)
'''
import gclib

#Constants
COUNTS_PER_MM = 2777.456  #adjust if necessary for our system depending on the manufacturing sheet (IN LAB)

def move_to_xy(x_mm, y_mm):
    """Move the Galil gantry to an (x, y) position in millimeters."""
    x_counts = int(x_mm * COUNTS_PER_MM)
    y_counts = int(y_mm * COUNTS_PER_MM)

    g = gclib.py()  #creates the connection object
    try:
        #Open Galil connection (adjust IP or COM port as needed)
        g.GOpen("'''YOUR IP ADDRESS HERE'''")  #or "COM1 --baud 115200" for USB
        print("Connected to Galil.")

        #send relative move command
        g.GCommand(f"PR {x_counts},{y_counts}")  #relative position move
        g.GCommand("BG X Y")                     #begin motion on X and Y axes
        g.GCommand("AM X Y")                     #wait for motion to complete
        print(f"Successfully moved to X={x_mm} mm, Y={y_mm} mm.")

    except Exception as e:
        print(f"Error: {e}")
    finally:
        g.GClose()
        print("Connection to Galil closed.")

def interactive_mode():
    print("\n Interactive Galil XY Controller")
    print("Enter X and Y values in mm (e.g., '10 20') or type 'q' to quit.\n")
    while True:
        coords = input("Enter X Y (mm): ").strip()
        if coords.lower() == 'q':
            break
        try:
            x_str, y_str = coords.split()
            move_to_xy(float(x_str), float(y_str))
        except Exception as e:
            print("Invalid input:", e)

'''Uncomment this to run interactively'''
# interactive_mode()

'''Or run one test move directly'''
# move_to_xy(10, 20)

'''
This code is to move the gantry with absolute positioning over the wet tank
'''
import gclib

# onstants â€” adjust if necessary based on our motor specs
COUNTS_PER_MM = 2777.456  #make sure this matches the config in-lab

def move_to_xy(x_mm, y_mm):
    """Move the Galil gantry to an absolute (x, y) position in millimeters."""
    x_counts = int(x_mm * COUNTS_PER_MM)
    y_counts = int(y_mm * COUNTS_PER_MM)

    g = gclib.py()  # create the connection object
    try:
        #open Galil connection (adjust this line for your setup)
        #use something like: g.GOpen("COM6 -s ALL") for USB or g.GOpen("192.168.1.100 --dev") for Ethernet
        g.GOpen("'''YOUR IP HERE'''")
        print("connected to Galil.")

        g.GCommand("SH X Y")  #turn on motors

        #send the absolute position move
        g.GCommand(f"PA {x_counts},{y_counts}")
        g.GCommand("BG X Y")
        g.GCommand("AM X Y")

        print(f"successfully moved to X={x_mm} mm, Y={y_mm} mm.")

    except Exception as e:
        print(f"error: {e}")
    finally:
        g.GClose()
        print("connection to Galil closed.")

def interactive_mode():
    print("interactive Galil XY Controller")
    print("enter X and Y values in mm (e.g., '10 20') or type 'q' to quit")
    while True:
        coords = input("enter X Y (mm): ").strip()
        if coords.lower() == 'q':
            break
        try:
            x_str, y_str = coords.split()
            move_to_xy(float(x_str), float(y_str))
        except Exception as e:
            print("invalid input:", e)

# uncomment one of these to run it:
# interactive_mode()
# move_to_xy(10, 20)